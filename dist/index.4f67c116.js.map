{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["// const canvas = <HTMLCanvasElement>document.getElementById(\"drawing-board\");\nconst toolBar = <HTMLElement>document.getElementById(\"toolbar\");\n\n//Get context of canvas\n// const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n// //Offset of canvas\n// enum Offset {\n//   X = canvas.offsetLeft,\n//   Y = canvas.offsetTop,\n// }\n\n// //Set canvas width and height\n// canvas.width = window.innerWidth - Offset.X;\n// canvas.height = window.innerHeight - Offset.Y;\n\n// let isDrawing: boolean;\n// let lineWidth = 5;\n\n// let startX: number;\n// let startY: number;\n\n// //Function runs whenever the mouse moves\n// const draw = (e: MouseEvent) => {\n//   if (!isDrawing) return;\n\n//   console.log(\"drawing\");\n\n//   //Set linewidth and cap\n//   ctx.lineWidth = lineWidth;\n\n//   ctx.lineCap = \"round\";\n//   //Create line based on client mouse position\n//   ctx.lineTo(e.clientX - Offset.X, e.clientY);\n//   //Set stroke\n//   ctx.stroke();\n// };\n\n// //Listen for changes\n// toolBar.addEventListener(\"change\", (e) => {\n//   //We know that target will be Input element so we type cast\n//   const target = e.target as HTMLInputElement;\n\n//   //IF Stroke\n//   if (target.id === \"stroke\") {\n//     //Set strokestyle\n//     ctx.strokeStyle = target.value;\n//   }\n\n//   //IF Linewidth\n//   if (target.id === \"lineWidth\") {\n//     //Set linewidth\n//     lineWidth = Number(target.value);\n//   }\n// });\n\n// toolBar.addEventListener(\"click\", (e) => {\n//   const target = e.target as HTMLButtonElement;\n//   if (target.id === \"clear\") {\n//     ctx.clearRect(0, 0, canvas.width, canvas.height);\n//   }\n// });\n\n// //When mouse is held down\n// canvas.addEventListener(\"mousedown\", (e) => {\n//   //Set drawing to true\n//   isDrawing = true;\n\n//   //Store starting point\n//   startX = e.clientX;\n//   startY = e.clientY;\n//   console.log(\"starting point set\");\n// });\n\n// //Whenever we let go of mouse\n// canvas.addEventListener(\"mouseup\", (e) => {\n//   //No longer painting\n//   isDrawing = false;\n\n//   //Save stroke\n//   ctx?.stroke();\n\n//   //Set or begin new path\n//   ctx?.beginPath();\n// });\n\n// //Listen for mousemove on canvas\n// canvas.addEventListener(\"mousemove\", draw);\n\nenum DrawingElementType {\n  controller = \"controller\",\n  pencil = \"pencil\",\n  eraser = \"eraser\",\n  colorPicker = \"colorPicker\",\n  lineWidth = \"lineWidth\",\n  clearCanvas = \"clearCanvas\",\n}\n\nclass DrawingCanvas {\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n\n  //Elements for controlling canvas props\n  private controller: HTMLElement;\n  private pencil: HTMLButtonElement;\n  private eraser: HTMLButtonElement;\n  private colorPicker: HTMLInputElement;\n  private lineWidthPicker: HTMLInputElement;\n  private clearCanvas: HTMLButtonElement;\n\n  //For state tracking\n  private isDrawing: boolean;\n  private isErasing: boolean;\n  private shouldDraw: boolean;\n  private shouldErase: boolean;\n\n  //Props\n  private lineWidth: number;\n  private strokeStyle: string;\n\n  constructor(\n    elementId: string,\n\n    options?: {\n      width?: number;\n      height?: number;\n      elements?: CanvasElement[];\n    }\n  ) {\n    //Select canvas element\n    const canvas = document.getElementById(elementId) as HTMLCanvasElement;\n    const context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n    //Try to save elements using hardcoded defaults\n    this.defaultStore();\n\n    //Check if any elements are passed\n    if (options?.elements) {\n      //IF any elements are passed\n      //THEN loop through each element and reassign element props\n      options.elements.forEach((element) => this.storeElements(element));\n    }\n\n    //Check if width and height has been set\n    options?.width\n      ? (canvas.width = options.width)\n      : (canvas.width = window.innerWidth - canvas.offsetLeft);\n    options?.height\n      ? (canvas.height = options.height)\n      : (canvas.height = window.innerHeight - canvas.offsetTop);\n\n    //Save canvas and context\n    this.canvas = canvas;\n    this.context = context;\n\n    //Assign default values\n    this.context.lineWidth = 5;\n    this.context.strokeStyle = \"black\";\n    //Add eventlisteners to canvas\n    this.listen();\n  }\n\n  //Tries to select using default\n  private defaultStore = () => {\n    const controller = <HTMLElement | null>document.getElementById(\"toolbar\");\n    if (controller) this.controller = controller;\n\n    const pen = <HTMLButtonElement | null>document.getElementById(\"pencil\");\n    if (pen) this.pencil = pen;\n\n    const eraser = <HTMLButtonElement | null>document.getElementById(\"eraser\");\n    if (eraser) this.eraser = eraser;\n\n    const colorPicker = <HTMLInputElement | null>(\n      document.getElementById(\"color\")\n    );\n    if (colorPicker) this.colorPicker = colorPicker;\n\n    const lineWidthPicker = <HTMLInputElement | null>(\n      document.getElementById(\"lineWidth\")\n    );\n    if (lineWidthPicker) this.lineWidthPicker = lineWidthPicker;\n\n    const clearCanvas = <HTMLButtonElement | null>(\n      document.getElementById(\"clear\")\n    );\n    if (clearCanvas) this.clearCanvas = clearCanvas;\n  };\n\n  //Runs on each element in the options\n  private storeElements = (element: CanvasElement) => {\n    //Look for type\n    switch (element.type) {\n      //IF type is controller\n      //THEN check if element has classname or id and query based on that\n      case \"controller\":\n        if (element.className) {\n          const controller = document.querySelector(\n            \".\" + element.className\n          ) as HTMLElement;\n          this.controller = controller;\n        }\n\n        if (element.id) {\n          const controller = document.getElementById(element.id) as HTMLElement;\n          this.controller = controller;\n        }\n\n        if (element.className && element.id) {\n          const controller = document.getElementById(element.id) as HTMLElement;\n          this.controller = controller;\n        }\n\n        break;\n\n      case \"pencil\":\n        if (element.className) {\n          const pen = document.querySelector(\n            \".\" + element.className\n          ) as HTMLButtonElement;\n\n          this.pencil = pen;\n        }\n        if (element.id) {\n          const pen = document.getElementById(element.id) as HTMLButtonElement;\n          this.pencil = pen;\n        }\n        if (element.className && element.id) {\n          const pen = document.getElementById(element.id) as HTMLButtonElement;\n          this.pencil = pen;\n        }\n\n        break;\n\n      case \"eraser\":\n        if (element.className) {\n          const eraser = document.querySelector(\n            \".\" + element.className\n          ) as HTMLButtonElement;\n          this.eraser = eraser;\n        }\n        if (element.id) {\n          const eraser = document.getElementById(\n            element.id\n          ) as HTMLButtonElement;\n\n          this.eraser = eraser;\n        }\n        if (element.className && element.id) {\n          const eraser = document.getElementById(\n            element.id\n          ) as HTMLButtonElement;\n          this.eraser = eraser;\n        }\n        break;\n\n      case \"colorPicker\":\n        if (element.className) {\n          const colorPicker = document.querySelector(\n            \".\" + element.className\n          ) as HTMLInputElement;\n          this.colorPicker = colorPicker;\n        }\n        if (element.id) {\n          const colorPicker = document.getElementById(\n            element.id\n          ) as HTMLInputElement;\n          this.colorPicker = colorPicker;\n        }\n        if (element.className && element.id) {\n          const colorPicker = document.getElementById(\n            element.id\n          ) as HTMLInputElement;\n          this.colorPicker = colorPicker;\n        }\n        break;\n\n      case \"lineWidth\":\n        if (element.className) {\n          const lineWidthPicker = document.querySelector(\n            \".\" + element.className\n          ) as HTMLInputElement;\n          this.lineWidthPicker = lineWidthPicker;\n        }\n        if (element.id) {\n          const lineWidthPicker = document.getElementById(\n            element.id\n          ) as HTMLInputElement;\n          this.lineWidthPicker = lineWidthPicker;\n        }\n        if (element.className && element.id) {\n          const lineWidthPicker = document.getElementById(\n            element.id\n          ) as HTMLInputElement;\n          this.lineWidthPicker = lineWidthPicker;\n        }\n        break;\n\n      case \"clearCanvas\":\n        if (element.className) {\n          const clearCanvas = document.querySelector(\n            \".\" + element.className\n          ) as HTMLButtonElement;\n          this.clearCanvas = clearCanvas;\n        }\n        if (element.id) {\n          const clearCanvas = document.getElementById(\n            element.id\n          ) as HTMLButtonElement;\n          this.clearCanvas = clearCanvas;\n        }\n        if (element.className && element.id) {\n          const clearCanvas = document.getElementById(\n            element.id\n          ) as HTMLButtonElement;\n          this.clearCanvas = clearCanvas;\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  //Controller Change handler\n  private changeHandler = (e: Event) => {\n    const colorPicker = this.colorPicker;\n    const lineWidthPicker = this.lineWidthPicker;\n\n    const target = e.target as HTMLInputElement;\n    const context = this.context;\n\n    //IF any element can be found\n    if (colorPicker) {\n      if (\n        (target.id && target.id === colorPicker.id) ||\n        (target.className && target.className === colorPicker.className)\n      ) {\n        context.strokeStyle = target.value;\n      }\n    }\n\n    if (lineWidthPicker) {\n      if (\n        (target.id && target.id === lineWidthPicker.id) ||\n        (target.className && target.className === lineWidthPicker.className)\n      ) {\n        context.lineWidth = Number(target.value);\n      }\n    }\n  };\n\n  //Controller click handler\n  private clickHandler = (e: MouseEvent) => {\n    const pen = this.pencil;\n    const eraser = this.eraser;\n    const clearCanvas = this.clearCanvas;\n\n    const context = this.context;\n\n    //We know that controller expects buttons for click functions\n    const target = e.target as HTMLButtonElement;\n\n    //Check if any element could be found from either options or default\n    if (clearCanvas) {\n      //IF it can THEN check if it has id or class that is equal to the target\n      if (\n        (target.id && target.id === clearCanvas.id) ||\n        (target.className && target.className === clearCanvas.className)\n      ) {\n        context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      }\n    }\n\n    if (pen) {\n      if (\n        (target.id && target.id === pen.id) ||\n        (target.className && target.className === pen.className)\n      ) {\n        eraser?.classList.remove(\"active\");\n\n        this.shouldErase = false;\n        this.shouldDraw = true;\n\n        //Add classList to indicate active tool\n        pen?.classList.add(\"active\");\n      }\n    }\n\n    if (eraser) {\n      if (\n        (target.id && target.id === eraser.id) ||\n        (target.className && target.className === eraser.className)\n      ) {\n        pen?.classList.remove(\"active\");\n\n        this.shouldDraw = false;\n        this.shouldErase = true;\n\n        eraser?.classList.add(\"active\");\n      }\n    }\n  };\n\n  //Listen for events on given canvas\n  private listen() {\n    const canvas = this.canvas;\n\n    const controller = this.controller;\n\n    canvas.addEventListener(\"mousedown\", this.start);\n    canvas.addEventListener(\"mouseup\", this.stop);\n    canvas.addEventListener(\"mousemove\", this.draw);\n\n    canvas.addEventListener(\"touchstart\", this.start);\n    canvas.addEventListener(\"touchend\", this.stop);\n    canvas.addEventListener(\"touchmove\", this.draw);\n\n    if (controller) {\n      controller.addEventListener(\"change\", this.changeHandler);\n      controller.addEventListener(\"click\", this.clickHandler);\n    }\n  }\n\n  //Runs whenever mouse is clicked\n  private start = (e: MouseEvent | TouchEvent) => {\n    //Check if event is touch or mouse\n    const evtType = (e as TouchEvent).touches\n      ? (e as TouchEvent).touches[0]\n      : (e as MouseEvent);\n\n    //If eraser has been selected\n    if (this.shouldErase) {\n      this.context.globalCompositeOperation = \"destination-out\";\n      this.isErasing = true;\n      this.isDrawing = false;\n    } else {\n      this.context.globalCompositeOperation = \"source-over\";\n      this.isDrawing = true;\n      this.isErasing = false;\n    }\n\n    const mouseX = evtType.clientX - this.canvas.offsetLeft;\n    const mouseY = evtType.clientY - this.canvas.offsetTop;\n  };\n\n  //Runs whenever mouse is released\n  private stop = () => {\n    this.isDrawing = false;\n    this.isErasing = false;\n    //Save stroke\n    this.context.stroke();\n    //New Path\n    this.context.beginPath();\n  };\n\n  //Runs whenever mouse moves\n  private draw = (e: MouseEvent | TouchEvent) => {\n    //IF we are not drawing or erasing\n    if (!this.isDrawing && !this.isErasing) return;\n\n    //Check if event is touch or mouse\n    const evtType = (e as TouchEvent).touches\n      ? (e as TouchEvent).touches[0]\n      : (e as MouseEvent);\n\n    this.context.lineCap = \"round\";\n\n    this.context.lineTo(\n      evtType.clientX - this.canvas.offsetLeft,\n      evtType.clientY - this.canvas.offsetTop\n    );\n\n    //Save stroke\n    this.context.stroke();\n  };\n\n  public log() {\n    return console.log(this.canvas);\n  }\n}\n\nnew DrawingCanvas(\"drawing-board\", {\n  elements: [{ type: DrawingElementType.pencil, className: \"pen\" }],\n});\n\ninterface CanvasElement {\n  type: DrawingElementType;\n  className?: string;\n  id?: string;\n}\n"],"names":["toolBar","document","getElementById","DrawingElementType","DrawingCanvas","constructor","elementId","options","this","defaultStore","controller","pen","pencil","eraser","colorPicker","lineWidthPicker","clearCanvas","storeElements","element","type","className","querySelector","id","changeHandler","e","target","context","strokeStyle","value","lineWidth","Number","clickHandler","clearRect","canvas","width","height","classList","remove","shouldErase","shouldDraw","add","start","evtType","touches","globalCompositeOperation","isErasing","isDrawing","clientX","offsetLeft","clientY","offsetTop","stop","stroke","beginPath","draw","lineCap","lineTo","getContext","elements","forEach","window","innerWidth","innerHeight","listen","addEventListener","log","console"],"version":3,"file":"index.4f67c116.js.map"}