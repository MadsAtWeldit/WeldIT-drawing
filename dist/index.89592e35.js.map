{"mappings":"aACA,MAAMA,QAAuBC,SAASC,eAAe,WAwFrD,MAAMC,cAWJC,YACEC,EACAC,GAkCMC,KAAAC,cAAiBC,IACvB,MAAMC,EAAUH,KAAKG,QAEfC,EAASF,EAAEE,OACC,WAAdA,EAAOC,KACTF,EAAQG,YAAcF,EAAOG,OAEb,cAAdH,EAAOC,KACTF,EAAQK,UAAYC,OAAOL,EAAOG,OAAK,EAKnCP,KAAAU,YAAeR,IACrB,MAAMC,EAAUH,KAAKG,QAIH,UAFHD,EAAEE,OAENC,IACTF,EAAQQ,UAAU,EAAG,EAAGX,KAAKY,OAAOC,MAAOb,KAAKY,OAAOE,OAAM,EAsBzDd,KAAAe,aAAgBb,IACtB,MAAMc,EAAWd,EAAiBe,QAC7Bf,EAAiBe,QAAQ,GACzBf,EAELF,KAAKkB,WAAY,EAEFF,EAAQG,QAAUnB,KAAKY,OAAOQ,WAC9BJ,EAAQK,QAAUrB,KAAKY,OAAOU,SAAS,EAIhDtB,KAAAuB,YAAc,KACpBvB,KAAKkB,WAAY,EAEjBlB,KAAKG,QAAQqB,SAEbxB,KAAKG,QAAQsB,WAAS,EAIhBzB,KAAA0B,KAAQxB,IACd,IAAKF,KAAKkB,UAAW,OAGrB,MAAMF,EAAWd,EAAiBe,QAC7Bf,EAAiBe,QAAQ,GACzBf,EAELF,KAAKG,QAAQK,UAAYR,KAAKQ,UAC9BR,KAAKG,QAAQwB,QAAU,QAEvB3B,KAAKG,QAAQyB,OACXZ,EAAQG,QAAUnB,KAAKY,OAAOQ,WAC9BJ,EAAQK,QAAUrB,KAAKY,OAAOU,WAIhCtB,KAAKG,QAAQqB,QAAM,EA9GnB,MAAMZ,EAASlB,SAASC,eAAeG,GACjCK,EAAUS,EAAOiB,WAAW,MAGlC,GAAI9B,aAAO,EAAPA,EAAS+B,aAAc,CACzB,MAAMC,EAAarC,SAASC,eAC1BI,EAAQ+B,cAEV9B,KAAK+B,WAAaA,CACnB,EAGDhC,aAAO,EAAPA,EAASc,OACJD,EAAOC,MAAQd,EAAQc,MACvBD,EAAOC,MAAQmB,OAAOC,WAAarB,EAAOQ,YAC/CrB,aAAO,EAAPA,EAASe,QACJF,EAAOE,OAASf,EAAQe,OACxBF,EAAOE,OAASkB,OAAOE,YAActB,EAAOU,UAGjDtB,KAAKY,OAASA,EACdZ,KAAKG,QAAUA,EAGfH,KAAKG,QAAQK,UAAY,EACzBR,KAAKG,QAAQG,YAAc,QAE3BN,KAAKmC,QACP,CA2BQA,SACN,MAAMvB,EAASZ,KAAKY,OACdmB,EAAa/B,KAAK+B,WAExBnB,EAAOwB,iBAAiB,YAAapC,KAAKe,cAC1CH,EAAOwB,iBAAiB,UAAWpC,KAAKuB,aACxCX,EAAOwB,iBAAiB,YAAapC,KAAK0B,MAE1Cd,EAAOwB,iBAAiB,aAAcpC,KAAKe,cAC3CH,EAAOwB,iBAAiB,WAAYpC,KAAKuB,aACzCX,EAAOwB,iBAAiB,YAAapC,KAAK0B,MAE1CK,EAAWK,iBAAiB,SAAUpC,KAAKC,eAC3C8B,EAAWK,iBAAiB,QAASpC,KAAKU,YAC5C,CA4CO2B,MACL,OAAOC,QAAQD,IAAIrC,KAAKY,OAC1B,EAGF,IAAIhB,cAAc,gBAAiB,CACjCkC,aAAc","sources":["src/index.ts"],"sourcesContent":["// const canvas = <HTMLCanvasElement>document.getElementById(\"drawing-board\");\nconst toolBar = <HTMLElement>document.getElementById(\"toolbar\");\n\n//Get context of canvas\n// const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n// //Offset of canvas\n// enum Offset {\n//   X = canvas.offsetLeft,\n//   Y = canvas.offsetTop,\n// }\n\n// //Set canvas width and height\n// canvas.width = window.innerWidth - Offset.X;\n// canvas.height = window.innerHeight - Offset.Y;\n\n// let isDrawing: boolean;\n// let lineWidth = 5;\n\n// let startX: number;\n// let startY: number;\n\n// //Function runs whenever the mouse moves\n// const draw = (e: MouseEvent) => {\n//   if (!isDrawing) return;\n\n//   console.log(\"drawing\");\n\n//   //Set linewidth and cap\n//   ctx.lineWidth = lineWidth;\n\n//   ctx.lineCap = \"round\";\n//   //Create line based on client mouse position\n//   ctx.lineTo(e.clientX - Offset.X, e.clientY);\n//   //Set stroke\n//   ctx.stroke();\n// };\n\n// //Listen for changes\n// toolBar.addEventListener(\"change\", (e) => {\n//   //We know that target will be Input element so we type cast\n//   const target = e.target as HTMLInputElement;\n\n//   //IF Stroke\n//   if (target.id === \"stroke\") {\n//     //Set strokestyle\n//     ctx.strokeStyle = target.value;\n//   }\n\n//   //IF Linewidth\n//   if (target.id === \"lineWidth\") {\n//     //Set linewidth\n//     lineWidth = Number(target.value);\n//   }\n// });\n\n// toolBar.addEventListener(\"click\", (e) => {\n//   const target = e.target as HTMLButtonElement;\n//   if (target.id === \"clear\") {\n//     ctx.clearRect(0, 0, canvas.width, canvas.height);\n//   }\n// });\n\n// //When mouse is held down\n// canvas.addEventListener(\"mousedown\", (e) => {\n//   //Set drawing to true\n//   isDrawing = true;\n\n//   //Store starting point\n//   startX = e.clientX;\n//   startY = e.clientY;\n//   console.log(\"starting point set\");\n// });\n\n// //Whenever we let go of mouse\n// canvas.addEventListener(\"mouseup\", (e) => {\n//   //No longer painting\n//   isDrawing = false;\n\n//   //Save stroke\n//   ctx?.stroke();\n\n//   //Set or begin new path\n//   ctx?.beginPath();\n// });\n\n// //Listen for mousemove on canvas\n// canvas.addEventListener(\"mousemove\", draw);\n\nclass DrawingCanvas {\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n\n  //For controlling the canvas context props\n  private controller: HTMLElement;\n\n  private isDrawing: boolean;\n  private lineWidth: number;\n  private strokeStyle: string;\n\n  constructor(\n    elementId: string,\n    options?: { controllerId?: string; width?: number; height?: number }\n  ) {\n    //Get element access based on id passed\n    const canvas = document.getElementById(elementId) as HTMLCanvasElement;\n    const context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n    //IF a controller is passed\n    if (options?.controllerId) {\n      const controller = document.getElementById(\n        options.controllerId\n      ) as HTMLElement;\n      this.controller = controller;\n    }\n\n    //Check if width and height has been set\n    options?.width\n      ? (canvas.width = options.width)\n      : (canvas.width = window.innerWidth - canvas.offsetLeft);\n    options?.height\n      ? (canvas.height = options.height)\n      : (canvas.height = window.innerHeight - canvas.offsetTop);\n\n    //Assign private props\n    this.canvas = canvas;\n    this.context = context;\n\n    //Default values\n    this.context.lineWidth = 5;\n    this.context.strokeStyle = \"black\";\n    //Add eventlisteners to canvas\n    this.listen();\n  }\n\n  //Controller Change handler\n  private changeHandler = (e: Event) => {\n    const context = this.context;\n\n    const target = e.target as HTMLInputElement;\n    if (target.id === \"stroke\") {\n      context.strokeStyle = target.value;\n    }\n    if (target.id === \"lineWidth\") {\n      context.lineWidth = Number(target.value);\n    }\n  };\n\n  //Controller Clear canvas\n  private clearCanvas = (e: MouseEvent) => {\n    const context = this.context;\n\n    const target = e.target as HTMLButtonElement;\n\n    if (target.id === \"clear\") {\n      context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  };\n\n  //Listen for events on given canvas\n  private listen() {\n    const canvas = this.canvas;\n    const controller = this.controller;\n\n    canvas.addEventListener(\"mousedown\", this.setDrawpoint);\n    canvas.addEventListener(\"mouseup\", this.stopDrawing);\n    canvas.addEventListener(\"mousemove\", this.draw);\n\n    canvas.addEventListener(\"touchstart\", this.setDrawpoint);\n    canvas.addEventListener(\"touchend\", this.stopDrawing);\n    canvas.addEventListener(\"touchmove\", this.draw);\n\n    controller.addEventListener(\"change\", this.changeHandler);\n    controller.addEventListener(\"click\", this.clearCanvas);\n  }\n\n  //Runs whenever mouse is clicked\n  private setDrawpoint = (e: MouseEvent | TouchEvent) => {\n    const evtType = (e as TouchEvent).touches\n      ? (e as TouchEvent).touches[0]\n      : (e as MouseEvent);\n\n    this.isDrawing = true;\n\n    const mouseX = evtType.clientX - this.canvas.offsetLeft;\n    const mouseY = evtType.clientY - this.canvas.offsetTop;\n  };\n\n  //Runs whenever mouse is released\n  private stopDrawing = () => {\n    this.isDrawing = false;\n    //Save stroke\n    this.context.stroke();\n    //New Path\n    this.context.beginPath();\n  };\n\n  //Runs whenever mouse moves\n  private draw = (e: MouseEvent | TouchEvent) => {\n    if (!this.isDrawing) return;\n\n    //Check if event has touch or mouse and assign accordingly\n    const evtType = (e as TouchEvent).touches\n      ? (e as TouchEvent).touches[0]\n      : (e as MouseEvent);\n\n    this.context.lineWidth = this.lineWidth;\n    this.context.lineCap = \"round\";\n\n    this.context.lineTo(\n      evtType.clientX - this.canvas.offsetLeft,\n      evtType.clientY - this.canvas.offsetTop\n    );\n\n    //Save stroke\n    this.context.stroke();\n  };\n\n  public log() {\n    return console.log(this.canvas);\n  }\n}\n\nnew DrawingCanvas(\"drawing-board\", {\n  controllerId: \"toolbar\",\n});\n"],"names":["toolBar","document","getElementById","DrawingCanvas","constructor","elementId","options","this","changeHandler","e","context","target","id","strokeStyle","value","lineWidth","Number","clearCanvas","clearRect","canvas","width","height","setDrawpoint","evtType","touches","isDrawing","clientX","offsetLeft","clientY","offsetTop","stopDrawing","stroke","beginPath","draw","lineCap","lineTo","getContext","controllerId","controller","window","innerWidth","innerHeight","listen","addEventListener","log","console"],"version":3,"file":"index.89592e35.js.map"}