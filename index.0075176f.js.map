{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["// const canvas = <HTMLCanvasElement>document.getElementById(\"drawing-board\");\nconst toolBar = <HTMLElement>document.getElementById(\"toolbar\");\n\n//Get context of canvas\n// const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n// //Offset of canvas\n// enum Offset {\n//   X = canvas.offsetLeft,\n//   Y = canvas.offsetTop,\n// }\n\n// //Set canvas width and height\n// canvas.width = window.innerWidth - Offset.X;\n// canvas.height = window.innerHeight - Offset.Y;\n\n// let isDrawing: boolean;\n// let lineWidth = 5;\n\n// let startX: number;\n// let startY: number;\n\n// //Function runs whenever the mouse moves\n// const draw = (e: MouseEvent) => {\n//   if (!isDrawing) return;\n\n//   console.log(\"drawing\");\n\n//   //Set linewidth and cap\n//   ctx.lineWidth = lineWidth;\n\n//   ctx.lineCap = \"round\";\n//   //Create line based on client mouse position\n//   ctx.lineTo(e.clientX - Offset.X, e.clientY);\n//   //Set stroke\n//   ctx.stroke();\n// };\n\n// //Listen for changes\n// toolBar.addEventListener(\"change\", (e) => {\n//   //We know that target will be Input element so we type cast\n//   const target = e.target as HTMLInputElement;\n\n//   //IF Stroke\n//   if (target.id === \"stroke\") {\n//     //Set strokestyle\n//     ctx.strokeStyle = target.value;\n//   }\n\n//   //IF Linewidth\n//   if (target.id === \"lineWidth\") {\n//     //Set linewidth\n//     lineWidth = Number(target.value);\n//   }\n// });\n\n// toolBar.addEventListener(\"click\", (e) => {\n//   const target = e.target as HTMLButtonElement;\n//   if (target.id === \"clear\") {\n//     ctx.clearRect(0, 0, canvas.width, canvas.height);\n//   }\n// });\n\n// //When mouse is held down\n// canvas.addEventListener(\"mousedown\", (e) => {\n//   //Set drawing to true\n//   isDrawing = true;\n\n//   //Store starting point\n//   startX = e.clientX;\n//   startY = e.clientY;\n//   console.log(\"starting point set\");\n// });\n\n// //Whenever we let go of mouse\n// canvas.addEventListener(\"mouseup\", (e) => {\n//   //No longer painting\n//   isDrawing = false;\n\n//   //Save stroke\n//   ctx?.stroke();\n\n//   //Set or begin new path\n//   ctx?.beginPath();\n// });\n\n// //Listen for mousemove on canvas\n// canvas.addEventListener(\"mousemove\", draw);\n\nenum DrawingElementType {\n  controller = \"controller\",\n  pencil = \"pencil\",\n  eraser = \"eraser\",\n  colorPicker = \"colorPicker\",\n  lineWidth = \"lineWidth\",\n  clearCanvas = \"clearCanvas\",\n}\n\nclass DrawingCanvas {\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n\n  //For controlling the canvas context props\n  private controller: HTMLElement;\n  private pencil: HTMLButtonElement;\n  private eraser: HTMLButtonElement;\n  private colorPicker: HTMLInputElement;\n  private pencilWidthPicker: HTMLInputElement;\n  private clearCanvas: HTMLButtonElement;\n\n  //For state tracking\n  private isDrawing: boolean;\n  private isErasing: boolean;\n  private shouldDraw: boolean;\n  private shouldErase: boolean;\n\n  //Props\n  private lineWidth: number;\n  private strokeStyle: string;\n\n  constructor(\n    elementId: string,\n\n    options?: {\n      width?: number;\n      height?: number;\n      elements?: CanvasElements[];\n    }\n  ) {\n    //Get element access based on id passed\n    const canvas = document.getElementById(elementId) as HTMLCanvasElement;\n    const context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n    //Check if any elements are passed\n    if (options?.elements) {\n      //IF any elements are passed\n      //THEN look for identifier and execute query\n      options.elements.forEach((element) => {\n        switch (element.type) {\n          case \"controller\":\n            if (element.className) {\n              const controller = document.querySelector(\n                element.className\n              ) as HTMLElement;\n              this.controller = controller;\n            }\n\n            if (element.id) {\n              const controller = document.getElementById(\n                element.id\n              ) as HTMLElement;\n              this.controller = controller;\n            }\n\n            if (element.className && element.id) {\n              const controller = document.getElementById(\n                element.id\n              ) as HTMLElement;\n              this.controller = controller;\n            }\n\n            break;\n\n          case \"pencil\":\n            if (element.className) {\n              const pen = document.querySelector(\n                element.className\n              ) as HTMLButtonElement;\n              this.pencil = pen;\n            }\n            if (element.id) {\n              const pen = document.getElementById(\n                element.id\n              ) as HTMLButtonElement;\n              this.pencil = pen;\n            }\n            if (element.className && element.id) {\n              const pen = document.getElementById(\n                element.id\n              ) as HTMLButtonElement;\n              this.pencil = pen;\n            }\n\n            break;\n\n          case \"eraser\":\n            if (element.className) {\n              const eraser = document.querySelector(\n                element.className\n              ) as HTMLButtonElement;\n              this.eraser = eraser;\n            }\n            if (element.id) {\n              const eraser = document.getElementById(\n                element.id\n              ) as HTMLButtonElement;\n              this.eraser = eraser;\n            }\n            if (element.className && element.id) {\n              const eraser = document.getElementById(\n                element.id\n              ) as HTMLButtonElement;\n              this.eraser = eraser;\n            }\n            break;\n\n          case \"colorPicker\":\n            if (element.className) {\n              const colorPicker = document.querySelector(\n                element.className\n              ) as HTMLInputElement;\n              this.colorPicker = colorPicker;\n            }\n            if (element.id) {\n              const colorPicker = document.getElementById(\n                element.id\n              ) as HTMLInputElement;\n              this.colorPicker = colorPicker;\n            }\n            if (element.className && element.id) {\n              const colorPicker = document.getElementById(\n                element.id\n              ) as HTMLInputElement;\n              this.colorPicker = colorPicker;\n            }\n            break;\n\n          case \"lineWidth\":\n            if (element.className) {\n              const pencilWidthPicker = document.querySelector(\n                element.className\n              ) as HTMLInputElement;\n              this.pencilWidthPicker = pencilWidthPicker;\n            }\n            if (element.id) {\n              const pencilWidthPicker = document.getElementById(\n                element.id\n              ) as HTMLInputElement;\n              this.pencilWidthPicker = pencilWidthPicker;\n            }\n            if (element.className && element.id) {\n              const pencilWidthPicker = document.getElementById(\n                element.id\n              ) as HTMLInputElement;\n              this.pencilWidthPicker = pencilWidthPicker;\n            }\n            break;\n\n          case \"clearCanvas\":\n            if (element.className) {\n              const clearCanvas = document.querySelector(\n                element.className\n              ) as HTMLButtonElement;\n              this.clearCanvas = clearCanvas;\n            }\n            if (element.id) {\n              const clearCanvas = document.getElementById(\n                element.id\n              ) as HTMLButtonElement;\n              this.clearCanvas = clearCanvas;\n            }\n            if (element.className && element.id) {\n              const clearCanvas = document.getElementById(\n                element.id\n              ) as HTMLButtonElement;\n              this.clearCanvas = clearCanvas;\n            }\n            break;\n          default:\n            break;\n        }\n      });\n    }\n\n    //Check if width and height has been set\n    options?.width\n      ? (canvas.width = options.width)\n      : (canvas.width = window.innerWidth - canvas.offsetLeft);\n    options?.height\n      ? (canvas.height = options.height)\n      : (canvas.height = window.innerHeight - canvas.offsetTop);\n\n    //Save canvas\n    this.canvas = canvas;\n    this.context = context;\n\n    //Default values\n    this.context.lineWidth = 5;\n    this.context.strokeStyle = \"black\";\n\n    //Add eventlisteners to canvas\n    this.listen();\n  }\n\n  //Controller Change handler\n  private changeHandler = (e: Event) => {\n    let colorPicker = document.getElementById(\"color\") as HTMLInputElement;\n    let pencilWidthPicker = document.getElementById(\n      \"lineWidth\"\n    ) as HTMLInputElement;\n\n    const target = e.target as HTMLInputElement;\n    const context = this.context;\n\n    if (this.colorPicker) {\n      colorPicker = this.colorPicker;\n    }\n\n    if (this.pencilWidthPicker) {\n      pencilWidthPicker = this.pencilWidthPicker;\n    }\n\n    //Check if targetId matches the element id\n    if (target.id === colorPicker.id) {\n      context.strokeStyle = target.value;\n    }\n\n    if (target.id === pencilWidthPicker.id) {\n      context.lineWidth = Number(target.value);\n    }\n  };\n\n  //Controller Clear canvas\n  private clickHandler = (e: MouseEvent) => {\n    let pen = document.getElementById(\"pen\") as HTMLButtonElement;\n    let eraser = document.getElementById(\"eraser\") as HTMLButtonElement;\n    let clearCanvas = document.getElementById(\"clear\") as HTMLButtonElement;\n\n    const context = this.context;\n    const target = e.target as HTMLButtonElement;\n\n    if (this.pencil) {\n      pen = this.pencil;\n    }\n\n    if (this.eraser) {\n      eraser = this.eraser;\n    }\n\n    if (this.clearCanvas) {\n      clearCanvas = this.clearCanvas;\n    }\n\n    //Clear\n    if (target.id === clearCanvas.id) {\n      context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    //Pencil\n    if (target.id === pen.id) {\n      console.log(target.id);\n      eraser?.classList.remove(\"active\");\n\n      this.shouldErase = false;\n      this.shouldDraw = true;\n\n      pen?.classList.add(\"active\");\n    }\n\n    //Eraser\n    if (target.id === eraser.id) {\n      pen?.classList.remove(\"active\");\n\n      this.shouldDraw = false;\n      this.shouldErase = true;\n\n      eraser?.classList.add(\"active\");\n    }\n  };\n\n  //Listen for events on given canvas\n  private listen() {\n    const canvas = this.canvas;\n    let controller = document.getElementById(\"toolbar\") as HTMLElement;\n    if (this.controller) {\n      controller = this.controller;\n    }\n\n    canvas.addEventListener(\"mousedown\", this.start);\n    canvas.addEventListener(\"mouseup\", this.stop);\n    canvas.addEventListener(\"mousemove\", this.draw);\n\n    canvas.addEventListener(\"touchstart\", this.start);\n    canvas.addEventListener(\"touchend\", this.stop);\n    canvas.addEventListener(\"touchmove\", this.draw);\n\n    controller.addEventListener(\"change\", this.changeHandler);\n    controller.addEventListener(\"click\", this.clickHandler);\n  }\n\n  //Runs whenever mouse is clicked\n  private start = (e: MouseEvent | TouchEvent) => {\n    const evtType = (e as TouchEvent).touches\n      ? (e as TouchEvent).touches[0]\n      : (e as MouseEvent);\n\n    if (this.shouldErase) {\n      this.context.globalCompositeOperation = \"destination-out\";\n      this.isErasing = true;\n      this.isDrawing = false;\n    } else {\n      this.context.globalCompositeOperation = \"source-over\";\n      this.isDrawing = true;\n      this.isErasing = false;\n    }\n\n    const mouseX = evtType.clientX - this.canvas.offsetLeft;\n    const mouseY = evtType.clientY - this.canvas.offsetTop;\n  };\n\n  //Runs whenever mouse is released\n  private stop = () => {\n    this.isDrawing = false;\n    this.isErasing = false;\n    //Save stroke\n    this.context.stroke();\n    //New Path\n    this.context.beginPath();\n  };\n\n  //Runs whenever mouse moves\n  private draw = (e: MouseEvent | TouchEvent) => {\n    //IF we are not drawing or erasing\n    if (!this.isDrawing && !this.isErasing) return;\n\n    //Check if event has touch or mouse and assign accordingly\n    const evtType = (e as TouchEvent).touches\n      ? (e as TouchEvent).touches[0]\n      : (e as MouseEvent);\n\n    this.context.lineWidth = this.lineWidth;\n    this.context.lineCap = \"round\";\n\n    this.context.lineTo(\n      evtType.clientX - this.canvas.offsetLeft,\n      evtType.clientY - this.canvas.offsetTop\n    );\n\n    //Save stroke\n    this.context.stroke();\n  };\n\n  public log() {\n    return console.log(this.canvas);\n  }\n}\n\nnew DrawingCanvas(\"drawing-board\");\n\ninterface CanvasElements {\n  type: DrawingElementType;\n  className?: string;\n  id?: string;\n}\n\ntype Elements = [\n  controllerId: {\n    class?: string;\n    id?: string;\n  },\n  penButtonId: {\n    class?: string;\n    id?: string;\n  },\n  eraserButtonId: {\n    class?: string;\n    id: string;\n  }\n];\n\n// type ElementTuple = [\n//   { type: DrawingElementType; className?: string; id?: string }\n// ];\n"],"names":["toolBar","document","getElementById","DrawingElementType","DrawingCanvas","constructor","elementId","options","this","changeHandler","e","colorPicker","pencilWidthPicker","target","context","id","strokeStyle","value","lineWidth","Number","clickHandler","pen","eraser","clearCanvas","pencil","clearRect","canvas","width","height","console","log","classList","remove","shouldErase","shouldDraw","add","start","evtType","touches","globalCompositeOperation","isErasing","isDrawing","clientX","offsetLeft","clientY","offsetTop","stop","stroke","beginPath","draw","lineCap","lineTo","getContext","elements","forEach","element","type","className","controller","querySelector","window","innerWidth","innerHeight","listen","addEventListener"],"version":3,"file":"index.0075176f.js.map"}